// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TCommentDataAccessLibrary.DataAccess;

#nullable disable

namespace TCommentDataAccessLibrary.Migrations
{
    [DbContext(typeof(TComment_DBContext))]
    partial class TComment_DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TCommentDataAccessLibrary.Models.channels", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telegramId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("channels");
                });

            modelBuilder.Entity("TCommentDataAccessLibrary.Models.userActivity", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("channelsid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("messagetext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("postlink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("posttext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("regdate")
                        .HasColumnType("datetime2");

                    b.Property<long>("userTelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("channelsid");

                    b.ToTable("userActivity");
                });

            modelBuilder.Entity("TCommentDataAccessLibrary.Models.users", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("userTelegramId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TCommentDataAccessLibrary.Models.userActivity", b =>
                {
                    b.HasOne("TCommentDataAccessLibrary.Models.channels", null)
                        .WithMany("useractivity")
                        .HasForeignKey("channelsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCommentDataAccessLibrary.Models.channels", b =>
                {
                    b.Navigation("useractivity");
                });
#pragma warning restore 612, 618
        }
    }
}
